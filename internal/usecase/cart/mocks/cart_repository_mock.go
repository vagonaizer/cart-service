// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

import (
	"route256/cart/internal/domain/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CartRepositoryMock implements mm_cart.CartRepository
type CartRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateCart          func(cart *models.Cart) (err error)
	funcCreateCartOrigin    string
	inspectFuncCreateCart   func(cart *models.Cart)
	afterCreateCartCounter  uint64
	beforeCreateCartCounter uint64
	CreateCartMock          mCartRepositoryMockCreateCart

	funcGetCart          func(userID int64) (cp1 *models.Cart, err error)
	funcGetCartOrigin    string
	inspectFuncGetCart   func(userID int64)
	afterGetCartCounter  uint64
	beforeGetCartCounter uint64
	GetCartMock          mCartRepositoryMockGetCart

	funcSaveCart          func(cart *models.Cart) (err error)
	funcSaveCartOrigin    string
	inspectFuncSaveCart   func(cart *models.Cart)
	afterSaveCartCounter  uint64
	beforeSaveCartCounter uint64
	SaveCartMock          mCartRepositoryMockSaveCart
}

// NewCartRepositoryMock returns a mock for mm_cart.CartRepository
func NewCartRepositoryMock(t minimock.Tester) *CartRepositoryMock {
	m := &CartRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateCartMock = mCartRepositoryMockCreateCart{mock: m}
	m.CreateCartMock.callArgs = []*CartRepositoryMockCreateCartParams{}

	m.GetCartMock = mCartRepositoryMockGetCart{mock: m}
	m.GetCartMock.callArgs = []*CartRepositoryMockGetCartParams{}

	m.SaveCartMock = mCartRepositoryMockSaveCart{mock: m}
	m.SaveCartMock.callArgs = []*CartRepositoryMockSaveCartParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCartRepositoryMockCreateCart struct {
	optional           bool
	mock               *CartRepositoryMock
	defaultExpectation *CartRepositoryMockCreateCartExpectation
	expectations       []*CartRepositoryMockCreateCartExpectation

	callArgs []*CartRepositoryMockCreateCartParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartRepositoryMockCreateCartExpectation specifies expectation struct of the CartRepository.CreateCart
type CartRepositoryMockCreateCartExpectation struct {
	mock               *CartRepositoryMock
	params             *CartRepositoryMockCreateCartParams
	paramPtrs          *CartRepositoryMockCreateCartParamPtrs
	expectationOrigins CartRepositoryMockCreateCartExpectationOrigins
	results            *CartRepositoryMockCreateCartResults
	returnOrigin       string
	Counter            uint64
}

// CartRepositoryMockCreateCartParams contains parameters of the CartRepository.CreateCart
type CartRepositoryMockCreateCartParams struct {
	cart *models.Cart
}

// CartRepositoryMockCreateCartParamPtrs contains pointers to parameters of the CartRepository.CreateCart
type CartRepositoryMockCreateCartParamPtrs struct {
	cart **models.Cart
}

// CartRepositoryMockCreateCartResults contains results of the CartRepository.CreateCart
type CartRepositoryMockCreateCartResults struct {
	err error
}

// CartRepositoryMockCreateCartOrigins contains origins of expectations of the CartRepository.CreateCart
type CartRepositoryMockCreateCartExpectationOrigins struct {
	origin     string
	originCart string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateCart *mCartRepositoryMockCreateCart) Optional() *mCartRepositoryMockCreateCart {
	mmCreateCart.optional = true
	return mmCreateCart
}

// Expect sets up expected params for CartRepository.CreateCart
func (mmCreateCart *mCartRepositoryMockCreateCart) Expect(cart *models.Cart) *mCartRepositoryMockCreateCart {
	if mmCreateCart.mock.funcCreateCart != nil {
		mmCreateCart.mock.t.Fatalf("CartRepositoryMock.CreateCart mock is already set by Set")
	}

	if mmCreateCart.defaultExpectation == nil {
		mmCreateCart.defaultExpectation = &CartRepositoryMockCreateCartExpectation{}
	}

	if mmCreateCart.defaultExpectation.paramPtrs != nil {
		mmCreateCart.mock.t.Fatalf("CartRepositoryMock.CreateCart mock is already set by ExpectParams functions")
	}

	mmCreateCart.defaultExpectation.params = &CartRepositoryMockCreateCartParams{cart}
	mmCreateCart.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateCart.expectations {
		if minimock.Equal(e.params, mmCreateCart.defaultExpectation.params) {
			mmCreateCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateCart.defaultExpectation.params)
		}
	}

	return mmCreateCart
}

// ExpectCartParam1 sets up expected param cart for CartRepository.CreateCart
func (mmCreateCart *mCartRepositoryMockCreateCart) ExpectCartParam1(cart *models.Cart) *mCartRepositoryMockCreateCart {
	if mmCreateCart.mock.funcCreateCart != nil {
		mmCreateCart.mock.t.Fatalf("CartRepositoryMock.CreateCart mock is already set by Set")
	}

	if mmCreateCart.defaultExpectation == nil {
		mmCreateCart.defaultExpectation = &CartRepositoryMockCreateCartExpectation{}
	}

	if mmCreateCart.defaultExpectation.params != nil {
		mmCreateCart.mock.t.Fatalf("CartRepositoryMock.CreateCart mock is already set by Expect")
	}

	if mmCreateCart.defaultExpectation.paramPtrs == nil {
		mmCreateCart.defaultExpectation.paramPtrs = &CartRepositoryMockCreateCartParamPtrs{}
	}
	mmCreateCart.defaultExpectation.paramPtrs.cart = &cart
	mmCreateCart.defaultExpectation.expectationOrigins.originCart = minimock.CallerInfo(1)

	return mmCreateCart
}

// Inspect accepts an inspector function that has same arguments as the CartRepository.CreateCart
func (mmCreateCart *mCartRepositoryMockCreateCart) Inspect(f func(cart *models.Cart)) *mCartRepositoryMockCreateCart {
	if mmCreateCart.mock.inspectFuncCreateCart != nil {
		mmCreateCart.mock.t.Fatalf("Inspect function is already set for CartRepositoryMock.CreateCart")
	}

	mmCreateCart.mock.inspectFuncCreateCart = f

	return mmCreateCart
}

// Return sets up results that will be returned by CartRepository.CreateCart
func (mmCreateCart *mCartRepositoryMockCreateCart) Return(err error) *CartRepositoryMock {
	if mmCreateCart.mock.funcCreateCart != nil {
		mmCreateCart.mock.t.Fatalf("CartRepositoryMock.CreateCart mock is already set by Set")
	}

	if mmCreateCart.defaultExpectation == nil {
		mmCreateCart.defaultExpectation = &CartRepositoryMockCreateCartExpectation{mock: mmCreateCart.mock}
	}
	mmCreateCart.defaultExpectation.results = &CartRepositoryMockCreateCartResults{err}
	mmCreateCart.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateCart.mock
}

// Set uses given function f to mock the CartRepository.CreateCart method
func (mmCreateCart *mCartRepositoryMockCreateCart) Set(f func(cart *models.Cart) (err error)) *CartRepositoryMock {
	if mmCreateCart.defaultExpectation != nil {
		mmCreateCart.mock.t.Fatalf("Default expectation is already set for the CartRepository.CreateCart method")
	}

	if len(mmCreateCart.expectations) > 0 {
		mmCreateCart.mock.t.Fatalf("Some expectations are already set for the CartRepository.CreateCart method")
	}

	mmCreateCart.mock.funcCreateCart = f
	mmCreateCart.mock.funcCreateCartOrigin = minimock.CallerInfo(1)
	return mmCreateCart.mock
}

// When sets expectation for the CartRepository.CreateCart which will trigger the result defined by the following
// Then helper
func (mmCreateCart *mCartRepositoryMockCreateCart) When(cart *models.Cart) *CartRepositoryMockCreateCartExpectation {
	if mmCreateCart.mock.funcCreateCart != nil {
		mmCreateCart.mock.t.Fatalf("CartRepositoryMock.CreateCart mock is already set by Set")
	}

	expectation := &CartRepositoryMockCreateCartExpectation{
		mock:               mmCreateCart.mock,
		params:             &CartRepositoryMockCreateCartParams{cart},
		expectationOrigins: CartRepositoryMockCreateCartExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateCart.expectations = append(mmCreateCart.expectations, expectation)
	return expectation
}

// Then sets up CartRepository.CreateCart return parameters for the expectation previously defined by the When method
func (e *CartRepositoryMockCreateCartExpectation) Then(err error) *CartRepositoryMock {
	e.results = &CartRepositoryMockCreateCartResults{err}
	return e.mock
}

// Times sets number of times CartRepository.CreateCart should be invoked
func (mmCreateCart *mCartRepositoryMockCreateCart) Times(n uint64) *mCartRepositoryMockCreateCart {
	if n == 0 {
		mmCreateCart.mock.t.Fatalf("Times of CartRepositoryMock.CreateCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateCart.expectedInvocations, n)
	mmCreateCart.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateCart
}

func (mmCreateCart *mCartRepositoryMockCreateCart) invocationsDone() bool {
	if len(mmCreateCart.expectations) == 0 && mmCreateCart.defaultExpectation == nil && mmCreateCart.mock.funcCreateCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateCart.mock.afterCreateCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateCart implements mm_cart.CartRepository
func (mmCreateCart *CartRepositoryMock) CreateCart(cart *models.Cart) (err error) {
	mm_atomic.AddUint64(&mmCreateCart.beforeCreateCartCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateCart.afterCreateCartCounter, 1)

	mmCreateCart.t.Helper()

	if mmCreateCart.inspectFuncCreateCart != nil {
		mmCreateCart.inspectFuncCreateCart(cart)
	}

	mm_params := CartRepositoryMockCreateCartParams{cart}

	// Record call args
	mmCreateCart.CreateCartMock.mutex.Lock()
	mmCreateCart.CreateCartMock.callArgs = append(mmCreateCart.CreateCartMock.callArgs, &mm_params)
	mmCreateCart.CreateCartMock.mutex.Unlock()

	for _, e := range mmCreateCart.CreateCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateCart.CreateCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateCart.CreateCartMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateCart.CreateCartMock.defaultExpectation.params
		mm_want_ptrs := mmCreateCart.CreateCartMock.defaultExpectation.paramPtrs

		mm_got := CartRepositoryMockCreateCartParams{cart}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.cart != nil && !minimock.Equal(*mm_want_ptrs.cart, mm_got.cart) {
				mmCreateCart.t.Errorf("CartRepositoryMock.CreateCart got unexpected parameter cart, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateCart.CreateCartMock.defaultExpectation.expectationOrigins.originCart, *mm_want_ptrs.cart, mm_got.cart, minimock.Diff(*mm_want_ptrs.cart, mm_got.cart))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateCart.t.Errorf("CartRepositoryMock.CreateCart got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateCart.CreateCartMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateCart.CreateCartMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateCart.t.Fatal("No results are set for the CartRepositoryMock.CreateCart")
		}
		return (*mm_results).err
	}
	if mmCreateCart.funcCreateCart != nil {
		return mmCreateCart.funcCreateCart(cart)
	}
	mmCreateCart.t.Fatalf("Unexpected call to CartRepositoryMock.CreateCart. %v", cart)
	return
}

// CreateCartAfterCounter returns a count of finished CartRepositoryMock.CreateCart invocations
func (mmCreateCart *CartRepositoryMock) CreateCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateCart.afterCreateCartCounter)
}

// CreateCartBeforeCounter returns a count of CartRepositoryMock.CreateCart invocations
func (mmCreateCart *CartRepositoryMock) CreateCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateCart.beforeCreateCartCounter)
}

// Calls returns a list of arguments used in each call to CartRepositoryMock.CreateCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateCart *mCartRepositoryMockCreateCart) Calls() []*CartRepositoryMockCreateCartParams {
	mmCreateCart.mutex.RLock()

	argCopy := make([]*CartRepositoryMockCreateCartParams, len(mmCreateCart.callArgs))
	copy(argCopy, mmCreateCart.callArgs)

	mmCreateCart.mutex.RUnlock()

	return argCopy
}

// MinimockCreateCartDone returns true if the count of the CreateCart invocations corresponds
// the number of defined expectations
func (m *CartRepositoryMock) MinimockCreateCartDone() bool {
	if m.CreateCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateCartMock.invocationsDone()
}

// MinimockCreateCartInspect logs each unmet expectation
func (m *CartRepositoryMock) MinimockCreateCartInspect() {
	for _, e := range m.CreateCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartRepositoryMock.CreateCart at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCartCounter := mm_atomic.LoadUint64(&m.afterCreateCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateCartMock.defaultExpectation != nil && afterCreateCartCounter < 1 {
		if m.CreateCartMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartRepositoryMock.CreateCart at\n%s", m.CreateCartMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartRepositoryMock.CreateCart at\n%s with params: %#v", m.CreateCartMock.defaultExpectation.expectationOrigins.origin, *m.CreateCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateCart != nil && afterCreateCartCounter < 1 {
		m.t.Errorf("Expected call to CartRepositoryMock.CreateCart at\n%s", m.funcCreateCartOrigin)
	}

	if !m.CreateCartMock.invocationsDone() && afterCreateCartCounter > 0 {
		m.t.Errorf("Expected %d calls to CartRepositoryMock.CreateCart at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateCartMock.expectedInvocations), m.CreateCartMock.expectedInvocationsOrigin, afterCreateCartCounter)
	}
}

type mCartRepositoryMockGetCart struct {
	optional           bool
	mock               *CartRepositoryMock
	defaultExpectation *CartRepositoryMockGetCartExpectation
	expectations       []*CartRepositoryMockGetCartExpectation

	callArgs []*CartRepositoryMockGetCartParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartRepositoryMockGetCartExpectation specifies expectation struct of the CartRepository.GetCart
type CartRepositoryMockGetCartExpectation struct {
	mock               *CartRepositoryMock
	params             *CartRepositoryMockGetCartParams
	paramPtrs          *CartRepositoryMockGetCartParamPtrs
	expectationOrigins CartRepositoryMockGetCartExpectationOrigins
	results            *CartRepositoryMockGetCartResults
	returnOrigin       string
	Counter            uint64
}

// CartRepositoryMockGetCartParams contains parameters of the CartRepository.GetCart
type CartRepositoryMockGetCartParams struct {
	userID int64
}

// CartRepositoryMockGetCartParamPtrs contains pointers to parameters of the CartRepository.GetCart
type CartRepositoryMockGetCartParamPtrs struct {
	userID *int64
}

// CartRepositoryMockGetCartResults contains results of the CartRepository.GetCart
type CartRepositoryMockGetCartResults struct {
	cp1 *models.Cart
	err error
}

// CartRepositoryMockGetCartOrigins contains origins of expectations of the CartRepository.GetCart
type CartRepositoryMockGetCartExpectationOrigins struct {
	origin       string
	originUserID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCart *mCartRepositoryMockGetCart) Optional() *mCartRepositoryMockGetCart {
	mmGetCart.optional = true
	return mmGetCart
}

// Expect sets up expected params for CartRepository.GetCart
func (mmGetCart *mCartRepositoryMockGetCart) Expect(userID int64) *mCartRepositoryMockGetCart {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartRepositoryMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartRepositoryMockGetCartExpectation{}
	}

	if mmGetCart.defaultExpectation.paramPtrs != nil {
		mmGetCart.mock.t.Fatalf("CartRepositoryMock.GetCart mock is already set by ExpectParams functions")
	}

	mmGetCart.defaultExpectation.params = &CartRepositoryMockGetCartParams{userID}
	mmGetCart.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCart.expectations {
		if minimock.Equal(e.params, mmGetCart.defaultExpectation.params) {
			mmGetCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCart.defaultExpectation.params)
		}
	}

	return mmGetCart
}

// ExpectUserIDParam1 sets up expected param userID for CartRepository.GetCart
func (mmGetCart *mCartRepositoryMockGetCart) ExpectUserIDParam1(userID int64) *mCartRepositoryMockGetCart {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartRepositoryMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartRepositoryMockGetCartExpectation{}
	}

	if mmGetCart.defaultExpectation.params != nil {
		mmGetCart.mock.t.Fatalf("CartRepositoryMock.GetCart mock is already set by Expect")
	}

	if mmGetCart.defaultExpectation.paramPtrs == nil {
		mmGetCart.defaultExpectation.paramPtrs = &CartRepositoryMockGetCartParamPtrs{}
	}
	mmGetCart.defaultExpectation.paramPtrs.userID = &userID
	mmGetCart.defaultExpectation.expectationOrigins.originUserID = minimock.CallerInfo(1)

	return mmGetCart
}

// Inspect accepts an inspector function that has same arguments as the CartRepository.GetCart
func (mmGetCart *mCartRepositoryMockGetCart) Inspect(f func(userID int64)) *mCartRepositoryMockGetCart {
	if mmGetCart.mock.inspectFuncGetCart != nil {
		mmGetCart.mock.t.Fatalf("Inspect function is already set for CartRepositoryMock.GetCart")
	}

	mmGetCart.mock.inspectFuncGetCart = f

	return mmGetCart
}

// Return sets up results that will be returned by CartRepository.GetCart
func (mmGetCart *mCartRepositoryMockGetCart) Return(cp1 *models.Cart, err error) *CartRepositoryMock {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartRepositoryMock.GetCart mock is already set by Set")
	}

	if mmGetCart.defaultExpectation == nil {
		mmGetCart.defaultExpectation = &CartRepositoryMockGetCartExpectation{mock: mmGetCart.mock}
	}
	mmGetCart.defaultExpectation.results = &CartRepositoryMockGetCartResults{cp1, err}
	mmGetCart.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCart.mock
}

// Set uses given function f to mock the CartRepository.GetCart method
func (mmGetCart *mCartRepositoryMockGetCart) Set(f func(userID int64) (cp1 *models.Cart, err error)) *CartRepositoryMock {
	if mmGetCart.defaultExpectation != nil {
		mmGetCart.mock.t.Fatalf("Default expectation is already set for the CartRepository.GetCart method")
	}

	if len(mmGetCart.expectations) > 0 {
		mmGetCart.mock.t.Fatalf("Some expectations are already set for the CartRepository.GetCart method")
	}

	mmGetCart.mock.funcGetCart = f
	mmGetCart.mock.funcGetCartOrigin = minimock.CallerInfo(1)
	return mmGetCart.mock
}

// When sets expectation for the CartRepository.GetCart which will trigger the result defined by the following
// Then helper
func (mmGetCart *mCartRepositoryMockGetCart) When(userID int64) *CartRepositoryMockGetCartExpectation {
	if mmGetCart.mock.funcGetCart != nil {
		mmGetCart.mock.t.Fatalf("CartRepositoryMock.GetCart mock is already set by Set")
	}

	expectation := &CartRepositoryMockGetCartExpectation{
		mock:               mmGetCart.mock,
		params:             &CartRepositoryMockGetCartParams{userID},
		expectationOrigins: CartRepositoryMockGetCartExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCart.expectations = append(mmGetCart.expectations, expectation)
	return expectation
}

// Then sets up CartRepository.GetCart return parameters for the expectation previously defined by the When method
func (e *CartRepositoryMockGetCartExpectation) Then(cp1 *models.Cart, err error) *CartRepositoryMock {
	e.results = &CartRepositoryMockGetCartResults{cp1, err}
	return e.mock
}

// Times sets number of times CartRepository.GetCart should be invoked
func (mmGetCart *mCartRepositoryMockGetCart) Times(n uint64) *mCartRepositoryMockGetCart {
	if n == 0 {
		mmGetCart.mock.t.Fatalf("Times of CartRepositoryMock.GetCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCart.expectedInvocations, n)
	mmGetCart.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCart
}

func (mmGetCart *mCartRepositoryMockGetCart) invocationsDone() bool {
	if len(mmGetCart.expectations) == 0 && mmGetCart.defaultExpectation == nil && mmGetCart.mock.funcGetCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCart.mock.afterGetCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCart implements mm_cart.CartRepository
func (mmGetCart *CartRepositoryMock) GetCart(userID int64) (cp1 *models.Cart, err error) {
	mm_atomic.AddUint64(&mmGetCart.beforeGetCartCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCart.afterGetCartCounter, 1)

	mmGetCart.t.Helper()

	if mmGetCart.inspectFuncGetCart != nil {
		mmGetCart.inspectFuncGetCart(userID)
	}

	mm_params := CartRepositoryMockGetCartParams{userID}

	// Record call args
	mmGetCart.GetCartMock.mutex.Lock()
	mmGetCart.GetCartMock.callArgs = append(mmGetCart.GetCartMock.callArgs, &mm_params)
	mmGetCart.GetCartMock.mutex.Unlock()

	for _, e := range mmGetCart.GetCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetCart.GetCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCart.GetCartMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCart.GetCartMock.defaultExpectation.params
		mm_want_ptrs := mmGetCart.GetCartMock.defaultExpectation.paramPtrs

		mm_got := CartRepositoryMockGetCartParams{userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGetCart.t.Errorf("CartRepositoryMock.GetCart got unexpected parameter userID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCart.GetCartMock.defaultExpectation.expectationOrigins.originUserID, *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCart.t.Errorf("CartRepositoryMock.GetCart got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCart.GetCartMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCart.GetCartMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCart.t.Fatal("No results are set for the CartRepositoryMock.GetCart")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetCart.funcGetCart != nil {
		return mmGetCart.funcGetCart(userID)
	}
	mmGetCart.t.Fatalf("Unexpected call to CartRepositoryMock.GetCart. %v", userID)
	return
}

// GetCartAfterCounter returns a count of finished CartRepositoryMock.GetCart invocations
func (mmGetCart *CartRepositoryMock) GetCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCart.afterGetCartCounter)
}

// GetCartBeforeCounter returns a count of CartRepositoryMock.GetCart invocations
func (mmGetCart *CartRepositoryMock) GetCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCart.beforeGetCartCounter)
}

// Calls returns a list of arguments used in each call to CartRepositoryMock.GetCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCart *mCartRepositoryMockGetCart) Calls() []*CartRepositoryMockGetCartParams {
	mmGetCart.mutex.RLock()

	argCopy := make([]*CartRepositoryMockGetCartParams, len(mmGetCart.callArgs))
	copy(argCopy, mmGetCart.callArgs)

	mmGetCart.mutex.RUnlock()

	return argCopy
}

// MinimockGetCartDone returns true if the count of the GetCart invocations corresponds
// the number of defined expectations
func (m *CartRepositoryMock) MinimockGetCartDone() bool {
	if m.GetCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCartMock.invocationsDone()
}

// MinimockGetCartInspect logs each unmet expectation
func (m *CartRepositoryMock) MinimockGetCartInspect() {
	for _, e := range m.GetCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartRepositoryMock.GetCart at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCartCounter := mm_atomic.LoadUint64(&m.afterGetCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCartMock.defaultExpectation != nil && afterGetCartCounter < 1 {
		if m.GetCartMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartRepositoryMock.GetCart at\n%s", m.GetCartMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartRepositoryMock.GetCart at\n%s with params: %#v", m.GetCartMock.defaultExpectation.expectationOrigins.origin, *m.GetCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCart != nil && afterGetCartCounter < 1 {
		m.t.Errorf("Expected call to CartRepositoryMock.GetCart at\n%s", m.funcGetCartOrigin)
	}

	if !m.GetCartMock.invocationsDone() && afterGetCartCounter > 0 {
		m.t.Errorf("Expected %d calls to CartRepositoryMock.GetCart at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCartMock.expectedInvocations), m.GetCartMock.expectedInvocationsOrigin, afterGetCartCounter)
	}
}

type mCartRepositoryMockSaveCart struct {
	optional           bool
	mock               *CartRepositoryMock
	defaultExpectation *CartRepositoryMockSaveCartExpectation
	expectations       []*CartRepositoryMockSaveCartExpectation

	callArgs []*CartRepositoryMockSaveCartParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CartRepositoryMockSaveCartExpectation specifies expectation struct of the CartRepository.SaveCart
type CartRepositoryMockSaveCartExpectation struct {
	mock               *CartRepositoryMock
	params             *CartRepositoryMockSaveCartParams
	paramPtrs          *CartRepositoryMockSaveCartParamPtrs
	expectationOrigins CartRepositoryMockSaveCartExpectationOrigins
	results            *CartRepositoryMockSaveCartResults
	returnOrigin       string
	Counter            uint64
}

// CartRepositoryMockSaveCartParams contains parameters of the CartRepository.SaveCart
type CartRepositoryMockSaveCartParams struct {
	cart *models.Cart
}

// CartRepositoryMockSaveCartParamPtrs contains pointers to parameters of the CartRepository.SaveCart
type CartRepositoryMockSaveCartParamPtrs struct {
	cart **models.Cart
}

// CartRepositoryMockSaveCartResults contains results of the CartRepository.SaveCart
type CartRepositoryMockSaveCartResults struct {
	err error
}

// CartRepositoryMockSaveCartOrigins contains origins of expectations of the CartRepository.SaveCart
type CartRepositoryMockSaveCartExpectationOrigins struct {
	origin     string
	originCart string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveCart *mCartRepositoryMockSaveCart) Optional() *mCartRepositoryMockSaveCart {
	mmSaveCart.optional = true
	return mmSaveCart
}

// Expect sets up expected params for CartRepository.SaveCart
func (mmSaveCart *mCartRepositoryMockSaveCart) Expect(cart *models.Cart) *mCartRepositoryMockSaveCart {
	if mmSaveCart.mock.funcSaveCart != nil {
		mmSaveCart.mock.t.Fatalf("CartRepositoryMock.SaveCart mock is already set by Set")
	}

	if mmSaveCart.defaultExpectation == nil {
		mmSaveCart.defaultExpectation = &CartRepositoryMockSaveCartExpectation{}
	}

	if mmSaveCart.defaultExpectation.paramPtrs != nil {
		mmSaveCart.mock.t.Fatalf("CartRepositoryMock.SaveCart mock is already set by ExpectParams functions")
	}

	mmSaveCart.defaultExpectation.params = &CartRepositoryMockSaveCartParams{cart}
	mmSaveCart.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveCart.expectations {
		if minimock.Equal(e.params, mmSaveCart.defaultExpectation.params) {
			mmSaveCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveCart.defaultExpectation.params)
		}
	}

	return mmSaveCart
}

// ExpectCartParam1 sets up expected param cart for CartRepository.SaveCart
func (mmSaveCart *mCartRepositoryMockSaveCart) ExpectCartParam1(cart *models.Cart) *mCartRepositoryMockSaveCart {
	if mmSaveCart.mock.funcSaveCart != nil {
		mmSaveCart.mock.t.Fatalf("CartRepositoryMock.SaveCart mock is already set by Set")
	}

	if mmSaveCart.defaultExpectation == nil {
		mmSaveCart.defaultExpectation = &CartRepositoryMockSaveCartExpectation{}
	}

	if mmSaveCart.defaultExpectation.params != nil {
		mmSaveCart.mock.t.Fatalf("CartRepositoryMock.SaveCart mock is already set by Expect")
	}

	if mmSaveCart.defaultExpectation.paramPtrs == nil {
		mmSaveCart.defaultExpectation.paramPtrs = &CartRepositoryMockSaveCartParamPtrs{}
	}
	mmSaveCart.defaultExpectation.paramPtrs.cart = &cart
	mmSaveCart.defaultExpectation.expectationOrigins.originCart = minimock.CallerInfo(1)

	return mmSaveCart
}

// Inspect accepts an inspector function that has same arguments as the CartRepository.SaveCart
func (mmSaveCart *mCartRepositoryMockSaveCart) Inspect(f func(cart *models.Cart)) *mCartRepositoryMockSaveCart {
	if mmSaveCart.mock.inspectFuncSaveCart != nil {
		mmSaveCart.mock.t.Fatalf("Inspect function is already set for CartRepositoryMock.SaveCart")
	}

	mmSaveCart.mock.inspectFuncSaveCart = f

	return mmSaveCart
}

// Return sets up results that will be returned by CartRepository.SaveCart
func (mmSaveCart *mCartRepositoryMockSaveCart) Return(err error) *CartRepositoryMock {
	if mmSaveCart.mock.funcSaveCart != nil {
		mmSaveCart.mock.t.Fatalf("CartRepositoryMock.SaveCart mock is already set by Set")
	}

	if mmSaveCart.defaultExpectation == nil {
		mmSaveCart.defaultExpectation = &CartRepositoryMockSaveCartExpectation{mock: mmSaveCart.mock}
	}
	mmSaveCart.defaultExpectation.results = &CartRepositoryMockSaveCartResults{err}
	mmSaveCart.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveCart.mock
}

// Set uses given function f to mock the CartRepository.SaveCart method
func (mmSaveCart *mCartRepositoryMockSaveCart) Set(f func(cart *models.Cart) (err error)) *CartRepositoryMock {
	if mmSaveCart.defaultExpectation != nil {
		mmSaveCart.mock.t.Fatalf("Default expectation is already set for the CartRepository.SaveCart method")
	}

	if len(mmSaveCart.expectations) > 0 {
		mmSaveCart.mock.t.Fatalf("Some expectations are already set for the CartRepository.SaveCart method")
	}

	mmSaveCart.mock.funcSaveCart = f
	mmSaveCart.mock.funcSaveCartOrigin = minimock.CallerInfo(1)
	return mmSaveCart.mock
}

// When sets expectation for the CartRepository.SaveCart which will trigger the result defined by the following
// Then helper
func (mmSaveCart *mCartRepositoryMockSaveCart) When(cart *models.Cart) *CartRepositoryMockSaveCartExpectation {
	if mmSaveCart.mock.funcSaveCart != nil {
		mmSaveCart.mock.t.Fatalf("CartRepositoryMock.SaveCart mock is already set by Set")
	}

	expectation := &CartRepositoryMockSaveCartExpectation{
		mock:               mmSaveCart.mock,
		params:             &CartRepositoryMockSaveCartParams{cart},
		expectationOrigins: CartRepositoryMockSaveCartExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveCart.expectations = append(mmSaveCart.expectations, expectation)
	return expectation
}

// Then sets up CartRepository.SaveCart return parameters for the expectation previously defined by the When method
func (e *CartRepositoryMockSaveCartExpectation) Then(err error) *CartRepositoryMock {
	e.results = &CartRepositoryMockSaveCartResults{err}
	return e.mock
}

// Times sets number of times CartRepository.SaveCart should be invoked
func (mmSaveCart *mCartRepositoryMockSaveCart) Times(n uint64) *mCartRepositoryMockSaveCart {
	if n == 0 {
		mmSaveCart.mock.t.Fatalf("Times of CartRepositoryMock.SaveCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveCart.expectedInvocations, n)
	mmSaveCart.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveCart
}

func (mmSaveCart *mCartRepositoryMockSaveCart) invocationsDone() bool {
	if len(mmSaveCart.expectations) == 0 && mmSaveCart.defaultExpectation == nil && mmSaveCart.mock.funcSaveCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveCart.mock.afterSaveCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveCart implements mm_cart.CartRepository
func (mmSaveCart *CartRepositoryMock) SaveCart(cart *models.Cart) (err error) {
	mm_atomic.AddUint64(&mmSaveCart.beforeSaveCartCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveCart.afterSaveCartCounter, 1)

	mmSaveCart.t.Helper()

	if mmSaveCart.inspectFuncSaveCart != nil {
		mmSaveCart.inspectFuncSaveCart(cart)
	}

	mm_params := CartRepositoryMockSaveCartParams{cart}

	// Record call args
	mmSaveCart.SaveCartMock.mutex.Lock()
	mmSaveCart.SaveCartMock.callArgs = append(mmSaveCart.SaveCartMock.callArgs, &mm_params)
	mmSaveCart.SaveCartMock.mutex.Unlock()

	for _, e := range mmSaveCart.SaveCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveCart.SaveCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveCart.SaveCartMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveCart.SaveCartMock.defaultExpectation.params
		mm_want_ptrs := mmSaveCart.SaveCartMock.defaultExpectation.paramPtrs

		mm_got := CartRepositoryMockSaveCartParams{cart}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.cart != nil && !minimock.Equal(*mm_want_ptrs.cart, mm_got.cart) {
				mmSaveCart.t.Errorf("CartRepositoryMock.SaveCart got unexpected parameter cart, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveCart.SaveCartMock.defaultExpectation.expectationOrigins.originCart, *mm_want_ptrs.cart, mm_got.cart, minimock.Diff(*mm_want_ptrs.cart, mm_got.cart))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveCart.t.Errorf("CartRepositoryMock.SaveCart got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveCart.SaveCartMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveCart.SaveCartMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveCart.t.Fatal("No results are set for the CartRepositoryMock.SaveCart")
		}
		return (*mm_results).err
	}
	if mmSaveCart.funcSaveCart != nil {
		return mmSaveCart.funcSaveCart(cart)
	}
	mmSaveCart.t.Fatalf("Unexpected call to CartRepositoryMock.SaveCart. %v", cart)
	return
}

// SaveCartAfterCounter returns a count of finished CartRepositoryMock.SaveCart invocations
func (mmSaveCart *CartRepositoryMock) SaveCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveCart.afterSaveCartCounter)
}

// SaveCartBeforeCounter returns a count of CartRepositoryMock.SaveCart invocations
func (mmSaveCart *CartRepositoryMock) SaveCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveCart.beforeSaveCartCounter)
}

// Calls returns a list of arguments used in each call to CartRepositoryMock.SaveCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveCart *mCartRepositoryMockSaveCart) Calls() []*CartRepositoryMockSaveCartParams {
	mmSaveCart.mutex.RLock()

	argCopy := make([]*CartRepositoryMockSaveCartParams, len(mmSaveCart.callArgs))
	copy(argCopy, mmSaveCart.callArgs)

	mmSaveCart.mutex.RUnlock()

	return argCopy
}

// MinimockSaveCartDone returns true if the count of the SaveCart invocations corresponds
// the number of defined expectations
func (m *CartRepositoryMock) MinimockSaveCartDone() bool {
	if m.SaveCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveCartMock.invocationsDone()
}

// MinimockSaveCartInspect logs each unmet expectation
func (m *CartRepositoryMock) MinimockSaveCartInspect() {
	for _, e := range m.SaveCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartRepositoryMock.SaveCart at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCartCounter := mm_atomic.LoadUint64(&m.afterSaveCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveCartMock.defaultExpectation != nil && afterSaveCartCounter < 1 {
		if m.SaveCartMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CartRepositoryMock.SaveCart at\n%s", m.SaveCartMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CartRepositoryMock.SaveCart at\n%s with params: %#v", m.SaveCartMock.defaultExpectation.expectationOrigins.origin, *m.SaveCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveCart != nil && afterSaveCartCounter < 1 {
		m.t.Errorf("Expected call to CartRepositoryMock.SaveCart at\n%s", m.funcSaveCartOrigin)
	}

	if !m.SaveCartMock.invocationsDone() && afterSaveCartCounter > 0 {
		m.t.Errorf("Expected %d calls to CartRepositoryMock.SaveCart at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveCartMock.expectedInvocations), m.SaveCartMock.expectedInvocationsOrigin, afterSaveCartCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateCartInspect()

			m.MinimockGetCartInspect()

			m.MinimockSaveCartInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateCartDone() &&
		m.MinimockGetCartDone() &&
		m.MinimockSaveCartDone()
}
